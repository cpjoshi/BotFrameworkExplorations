[{"C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\components\\kycform.tsx":"1","C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\index.tsx":"2","C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\components\\introduction.tsx":"3","C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\storage\\KycRepository.ts":"4","C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\storage\\IndexedDb.ts":"5","C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\ConfigureVariables.tsx":"6","C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\worker\\index.ts":"7","C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\worker\\worker.ts":"8","C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\components\\ssopage.tsx":"9","C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\components\\configuration.tsx":"10","C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\components\\MessageForm.tsx":"11","C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\reportWebVitals.ts":"12","C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\serviceWorkerRegistration.ts":"13","C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\storage\\teststore.ts":"14"},{"size":5890,"mtime":1613540098892,"results":"15","hashOfConfig":"16"},{"size":975,"mtime":1613026529466,"results":"17","hashOfConfig":"16"},{"size":9358,"mtime":1617952983951,"results":"18","hashOfConfig":"16"},{"size":2495,"mtime":1613545674994,"results":"19","hashOfConfig":"16"},{"size":2882,"mtime":1614071202314,"results":"20","hashOfConfig":"16"},{"size":456,"mtime":1611300439719,"results":"21","hashOfConfig":"16"},{"size":117,"mtime":1612934657551,"results":"22","hashOfConfig":"16"},{"size":430,"mtime":1614054738336,"results":"23","hashOfConfig":"16"},{"size":2378,"mtime":1611300298589,"results":"24","hashOfConfig":"16"},{"size":1355,"mtime":1613459815150,"results":"25","hashOfConfig":"16"},{"size":1973,"mtime":1612465154146,"results":"26","hashOfConfig":"16"},{"size":425,"mtime":1611293909301,"results":"27","hashOfConfig":"16"},{"size":5256,"mtime":1611293909301,"results":"28","hashOfConfig":"16"},{"size":1007,"mtime":1613550554529,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"32","usedDeprecatedRules":"33"},"1ep9pm0",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"42","usedDeprecatedRules":"33"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"53","usedDeprecatedRules":"33"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\components\\kycform.tsx",["70","71"],"ï»¿import React from 'react';\r\nimport * as microsoftTeams from '@microsoft/teams-js';\r\nimport { Button, Input, Form, Image } from '@fluentui/react-northstar';\r\nimport Worker from '../worker';\r\nimport KycRepository from '../storage/KycRepository';\r\n\r\nconst instanceWorker = new Worker();\r\n\r\nexport interface IAppState {\r\n    teamContext: microsoftTeams.Context | null;\r\n    imgSrc: string;\r\n    name: string;\r\n    email: string;\r\n    phone: string;\r\n    birthday: Date;\r\n    pending: number;\r\n    completed: number;\r\n}\r\n\r\nexport class kycform extends React.Component<{}, IAppState> {\r\n    channel: BroadcastChannel;\r\n    kycRecordsRepository: KycRepository;\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n        microsoftTeams.initialize();\r\n        this.kycRecordsRepository = new KycRepository();\r\n\r\n        this.state = {\r\n            teamContext: null,\r\n            imgSrc: '/take-a-photo.png',\r\n            name: 'CPJoshi',\r\n            email: 'cpj@mymail.com',\r\n            phone: '726317863',\r\n            birthday: new Date(\"2011-01-16\"),\r\n            pending: 0,\r\n            completed: 0\r\n        };\r\n\r\n        microsoftTeams.getContext(context => {\r\n            this.setState({ teamContext: context });\r\n        });\r\n\r\n        this.channel = new BroadcastChannel('datasync');\r\n        this.takePhoto = this.takePhoto.bind(this);\r\n        this.saveLocal = this.saveLocal.bind(this);\r\n        this.startWebWorker = this.startWebWorker.bind(this);\r\n        this.startServiceWorker = this.startServiceWorker.bind(this);\r\n        this.updateUIState = this.updateUIState.bind(this);\r\n        \r\n        this.channel.onmessage = e => {\r\n            this.updateUIState();\r\n            console.log(\"BroadCastChannel: \" + e);\r\n        }\r\n        this.updateUIState();\r\n        this.startWebWorker();\r\n    }\r\n\r\n    takePhoto() {\r\n        var that = this;\r\n        microsoftTeams.media.captureImage((sdkerr, files) => {\r\n            if (!sdkerr) {\r\n                var src = \"data:image/png;base64,\" + files[0].content;\r\n                that.setState({ imgSrc: src });\r\n            }\r\n        })\r\n    }\r\n\r\n    async saveLocal(e: any) {\r\n        var quota = await navigator.storage.estimate();\r\n        var totalSpace = quota.quota;\r\n        var usedSpace = quota.usage;\r\n        console.log(\"TotalSpace: \" + totalSpace + \" UsedSapce:\" + usedSpace);\r\n        \r\n        await this.kycRecordsRepository.enqueueForSync({\r\n            name: this.state.name,\r\n            email: this.state.email,\r\n            phone: this.state.phone,\r\n            birthday: this.state.birthday,\r\n            imgSrc: this.state.imgSrc\r\n        });\r\n\r\n        this.updateUIState();\r\n        this.startWebWorker();\r\n        //this.startServiceWorker();\r\n        e.preventDefault();\r\n    }\r\n\r\n    async updateUIState() {\r\n        this.setState({\r\n            pending: await this.kycRecordsRepository.getPendingRecordsCount(),\r\n            completed: await this.kycRecordsRepository.getProcessedRecordsCount()\r\n        });\r\n    }\r\n    \r\n    startWebWorker() {\r\n        console.log(\"Invoking web worker here...\");\r\n        instanceWorker.startSync();\r\n    }\r\n\r\n    startServiceWorker() {\r\n        navigator.serviceWorker.ready.then(reg => {\r\n            var authtoken = \"this_is_sample_token\";\r\n            var syncdata = {\"tag\": \"kyc-sync\", \"authtoken\":authtoken};\r\n            reg.sync.register(JSON.stringify(syncdata))\r\n            .catch((e: DOMException) => {\r\n                if(e.message === 'Background Sync is disabled.') {\r\n                    this.startWebWorker();\r\n                }\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <div className=\"wrapper-row\">\r\n                    <button className='pending'>Pending: {this.state.pending}</button>\r\n                    <button className='completed' >Processed: {this.state.completed}</button>\r\n                </div>\r\n            <Form onSubmit={this.saveLocal}>\r\n                <Image id=\"kycphoto\" width=\"150\" height=\"150\" alt=\"Take the photo\" src={this.state.imgSrc} onClick={this.takePhoto} /> \r\n                <Form.Input fluid clearable\r\n                    label=\"Name\"\r\n                    name=\"name\"\r\n                    id=\"name\"\r\n                    key=\"name\"\r\n                    value={this.state.name}\r\n                    successIndicator=\"true\"\r\n                    onChange={(e: any) => {\r\n                        this.setState({ name: e.target.value });\r\n                    }}\r\n                />\r\n                <Form.Input fluid clearable\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    id=\"email\"\r\n                    key=\"email\"\r\n                    type=\"email\"\r\n                    value={this.state.email}\r\n                    onChange= {(e: any) => {\r\n                        this.setState({ email: e.target.value });\r\n                    }}\r\n                />\r\n                <Form.Input fluid clearable\r\n                    label=\"Phone\"\r\n                    name=\"phone\"\r\n                    id=\"phone\"\r\n                    key=\"phone\"\r\n                    type=\"phone\"\r\n                    value={this.state.phone}\r\n                    onChange={(e: any) => {\r\n                        this.setState({ phone: e.target.value });\r\n                    }}\r\n                />\r\n\r\n                <Form.Input fluid\r\n                    label=\"Birthday\"\r\n                    name=\"birthday\"\r\n                    id=\"birthday\"\r\n                    key= \"birthday\"\r\n                    type=\"date\"\r\n                    onChange= {(e: any) => {\r\n                        this.setState({ birthday: e.target.value });\r\n                    }}\r\n                />\r\n                <Form.Field control={{ as: Button, content: 'Submit' }} />\r\n            </Form>\r\n            </div>\r\n        );\r\n    }\r\n}",["72","73"],"C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\index.tsx",[],"C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\components\\introduction.tsx",["74","75","76"],"C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\storage\\KycRepository.ts",[],"C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\storage\\IndexedDb.ts",["77"],"ï»¿import { IDBPDatabase, openDB } from 'idb';\r\n\r\nclass IndexedDb {\r\n    private database: string;\r\n    private db: any;\r\n\r\n    constructor(database: string) {\r\n        this.database = database;\r\n    }\r\n\r\n    public async createObjectStore(tableNames: string[]) {\r\n        try {\r\n            this.db = await openDB(this.database, 1, {\r\n                upgrade(db: IDBPDatabase) {\r\n                    for (const tableName of tableNames) {\r\n                        if (db.objectStoreNames.contains(tableName)) {\r\n                            continue;\r\n                        }\r\n                        db.createObjectStore(tableName, { autoIncrement: true, keyPath: 'id' });\r\n                    }\r\n                },\r\n            });\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public async getAllKeys(tableName: String) {\r\n        const tx = this.db.transaction(tableName, 'readonly');\r\n        const store = tx.objectStore(tableName);\r\n        const result = await store.getAllKeys();\r\n        return result;        \r\n    }\r\n\r\n    public async getValue(tableName: string, id: number) {\r\n        const tx = this.db.transaction(tableName, 'readonly');\r\n        const store = tx.objectStore(tableName);\r\n        const result = await store.get(id);\r\n        console.log('Get Data ', JSON.stringify(result));\r\n        return result;\r\n    }\r\n\r\n    public async getAllValue(tableName: string) {\r\n        const tx = this.db.transaction(tableName, 'readonly');\r\n        const store = tx.objectStore(tableName);\r\n        const result = await store.getAll();\r\n        console.log('Retrieve All Items: ', JSON.stringify(result));\r\n        return result;\r\n    }\r\n\r\n    public async putValue(tableName: string, value: object) {\r\n        const tx = this.db.transaction(tableName, 'readwrite');\r\n        const store = tx.objectStore(tableName);\r\n        const result = await store.put(value);\r\n        console.log('Put Item: ', JSON.stringify(result));\r\n        return result;\r\n    }\r\n\r\n    public async putBulkValue(tableName: string, values: object[]) {\r\n        const tx = this.db.transaction(tableName, 'readwrite');\r\n        const store = tx.objectStore(tableName);\r\n        for (const value of values) {\r\n            const result = await store.put(value);\r\n            console.log('Put Bulk Data ', JSON.stringify(result));\r\n        }\r\n        return this.getAllValue(tableName);\r\n    }\r\n\r\n    public async deleteValue(tableName: string, id: number) {\r\n        const tx = this.db.transaction(tableName, 'readwrite');\r\n        const store = tx.objectStore(tableName);\r\n        const result = await store.get(id);\r\n        if (!result) {\r\n            console.log('Id not found', id);\r\n            return result;\r\n        }\r\n        await store.delete(id);\r\n        console.log('Deleted Data', id);\r\n        return id;\r\n    }\r\n}\r\n\r\nexport default IndexedDb;","C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\ConfigureVariables.tsx",["78"],"ï»¿export const getBaseUrl = ():string => {\r\n    return window.location.origin;\r\n}\r\n\r\nexport const getAppId = (): string => {\r\n    return \"14a6686e-e903-4e55-b945-dc2472381849\";\r\n}\r\n\r\nexport class GlobalVars {\r\n    public static initializeCalled: boolean = false;\r\n    public static currentWindow: Window | any;\r\n    public static parentWindow: Window | any;\r\n    public static isFramelessWindow: boolean = false;\r\n    public static childWindow: Window;\r\n}",["79","80"],"C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\worker\\index.ts",[],"C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\worker\\worker.ts",[],"C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\components\\ssopage.tsx",["81"],"ï»¿import React from 'react';\r\nimport * as microsoftTeams from '@microsoft/teams-js'\r\nimport { Button, TextArea, Input } from '@fluentui/react-northstar';\r\n\r\nexport interface AuthResult {\r\n    result: string;\r\n    authdone: boolean;\r\n    apiresult: string;\r\n}\r\n\r\nexport default class SSOPage extends React.Component<{}, AuthResult> {\r\n    apiUrl: any;\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.apiUrl = null;\r\n        this.state = { result: \"\", authdone: false, apiresult: \"\" };\r\n        this.onSignIn = this.onSignIn.bind(this);\r\n        this.onMakeCall = this.onMakeCall.bind(this);\r\n    }\r\n\r\n    onSignIn() {\r\n        microsoftTeams.initialize();\r\n\r\n        let that = this;\r\n\r\n        const authTokenRequest = {\r\n            resources: [\"api://botexplorations.azurefd.net/14a6686e-e903-4e55-b945-dc2472381849\"],\r\n            successCallback: function (token: string) { that.setState({ result: token, authdone: true }); },\r\n            failureCallback: function (error: string) { that.setState({ result: error, authdone: false }); },\r\n        };\r\n\r\n        microsoftTeams.authentication.getAuthToken(authTokenRequest);\r\n    }\r\n\r\n    onMakeCall() {\r\n        fetch(this.apiUrl?.state.value, {\r\n            method: \"POST\",\r\n            headers: {\r\n                Accept: \"gzip, deflate, br\",\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: \"Bearer \" + this.state.result\r\n            },\r\n            body: \"[]\"\r\n        }).then(res => {\r\n            this.setState({\r\n                apiresult: JSON.stringify(res)\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <TextArea disabled fluid placeholder=\"Your token will appear here\" value={this.state.result} />\r\n                </div>\r\n\r\n                <Button content=\"Sign In\" onClick={this.onSignIn} primary />\r\n                {this.state.authdone && \r\n                    <div>\r\n                    <Input fluid placeholder=\"type graph api url here...\" ref={ (el:any) => this.apiUrl=el }/>\r\n                    <Button content=\"Call\" onClick={this.onMakeCall} primary />\r\n                    <TextArea disabled fluid placeholder=\"Results will appear here\" value={this.state.apiresult} />\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\components\\configuration.tsx",["82"],"ï»¿import React from 'react';\r\nimport * as microsoftTeams from '@microsoft/teams-js'\r\nimport { Button, Input } from '@fluentui/react-northstar';\r\nimport { getBaseUrl } from '../ConfigureVariables';\r\n\r\n\r\nclass configuration extends React.Component {\r\n    tabName: any;\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.tabName = null;\r\n        this.onAdd = this.onAdd.bind(this);\r\n    }\r\n\r\n    onAdd() {\r\n        microsoftTeams.initialize();\r\n        var tab = this.tabName?.value;\r\n        microsoftTeams.settings.registerOnSaveHandler(function (saveEvent) {\r\n            microsoftTeams.settings.setSettings({\r\n                entityId: \"myconfigTab\",\r\n                contentUrl: `${getBaseUrl()}/kycform?host=msteams&from=config`,\r\n                suggestedDisplayName: tab,\r\n                websiteUrl: \"https://botexplorations.azurefd.net\"\r\n            });\r\n\r\n            saveEvent.notifySuccess();\r\n        });\r\n\r\n        microsoftTeams.settings.setValidityState(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <Input fluid placeholder=\"type tab name here...\" ref={(el:any) => this.tabName = el} />\r\n                </div>\r\n                <Button content=\"Add\" onClick={this.onAdd} primary />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default configuration;",["83","84"],"C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\components\\MessageForm.tsx",["85"],"ï»¿import React from 'react';\r\nimport * as microsoftTeams from '@microsoft/teams-js'\r\nimport { Button } from '@fluentui/react-northstar';\r\nimport { getAppId } from '../ConfigureVariables';\r\n\r\nexport interface IAppState {\r\n    teamContext: microsoftTeams.Context | null\r\n}\r\n\r\nexport class MessageForm extends React.Component<{}, IAppState> {\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.onClickSeverity1 = this.onClickSeverity1.bind(this);\r\n        this.onClickSeverity2 = this.onClickSeverity2.bind(this);\r\n        this.onClickSeverity3 = this.onClickSeverity3.bind(this);\r\n        microsoftTeams.initialize();\r\n\r\n        this.state = {\r\n            teamContext: null\r\n        };\r\n\r\n        microsoftTeams.getContext(context => {\r\n            this.setState({ teamContext: context });\r\n        });\r\n    }\r\n\r\n    onClickSeverity1() {\r\n        let alertmsg = {\r\n            \"severity\": \"Severity1\"\r\n        };\r\n        microsoftTeams.tasks.submitTask(alertmsg, getAppId());\r\n    }\r\n\r\n    onClickSeverity2() {\r\n        let alertmsg = {\r\n            \"severity\": \"Severity2\"\r\n        };\r\n        microsoftTeams.tasks.submitTask(alertmsg, getAppId());\r\n    }\r\n\r\n    onClickSeverity3() {\r\n        let alertmsg = {\r\n            \"severity\": \"Severity3\"\r\n        };\r\n        microsoftTeams.tasks.submitTask(alertmsg, getAppId());\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Hello {this.state.teamContext?.userPrincipalName}, Send Alert message to your team members.\r\n                <div>\r\n                    <Button content=\"Severity-1\" onClick={this.onClickSeverity1} primary />\r\n                </div>\r\n                <div>\r\n                    <Button content=\"Severity-2\" onClick={this.onClickSeverity2} primary />\r\n                </div>\r\n                <div>\r\n                    <Button content=\"Severity-3\" onClick={this.onClickSeverity3} primary />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}",["86","87"],"C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\reportWebVitals.ts",[],["88","89"],"C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\serviceWorkerRegistration.ts",[],["90","91"],"C:\\Users\\chjos\\gitrepos\\BotFrameworkExplorations\\AdapativeCardExperiments\\bot-tab\\src\\storage\\teststore.ts",[],{"ruleId":"92","severity":1,"message":"93","line":1,"column":1,"nodeType":"94","messageId":"95","fix":"96"},{"ruleId":"97","severity":1,"message":"98","line":3,"column":18,"nodeType":"99","messageId":"100","endLine":3,"endColumn":23},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"92","severity":1,"message":"93","line":1,"column":1,"nodeType":"94","messageId":"95","fix":"105"},{"ruleId":"97","severity":1,"message":"98","line":3,"column":10,"nodeType":"99","messageId":"100","endLine":3,"endColumn":15},{"ruleId":"97","severity":1,"message":"106","line":6,"column":8,"nodeType":"99","messageId":"100","endLine":6,"endColumn":21},{"ruleId":"92","severity":1,"message":"93","line":1,"column":1,"nodeType":"94","messageId":"95","fix":"107"},{"ruleId":"92","severity":1,"message":"93","line":1,"column":1,"nodeType":"94","messageId":"95","fix":"108"},{"ruleId":"101","replacedBy":"109"},{"ruleId":"103","replacedBy":"110"},{"ruleId":"92","severity":1,"message":"93","line":1,"column":1,"nodeType":"94","messageId":"95","fix":"111"},{"ruleId":"92","severity":1,"message":"93","line":1,"column":1,"nodeType":"94","messageId":"95","fix":"112"},{"ruleId":"101","replacedBy":"113"},{"ruleId":"103","replacedBy":"114"},{"ruleId":"92","severity":1,"message":"93","line":1,"column":1,"nodeType":"94","messageId":"95","fix":"115"},{"ruleId":"101","replacedBy":"116"},{"ruleId":"103","replacedBy":"117"},{"ruleId":"101","replacedBy":"118"},{"ruleId":"103","replacedBy":"119"},{"ruleId":"101","replacedBy":"120"},{"ruleId":"103","replacedBy":"121"},"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"122","text":"123"},"@typescript-eslint/no-unused-vars","'Input' is defined but never used.","Identifier","unusedVar","no-native-reassign",["124"],"no-negated-in-lhs",["125"],{"range":"126","text":"123"},"'TestIndexedDb' is defined but never used.",{"range":"127","text":"123"},{"range":"128","text":"123"},["124"],["125"],{"range":"129","text":"123"},{"range":"130","text":"123"},["124"],["125"],{"range":"131","text":"123"},["124"],["125"],["124"],["125"],["124"],["125"],[-1,0],"","no-global-assign","no-unsafe-negation",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]]